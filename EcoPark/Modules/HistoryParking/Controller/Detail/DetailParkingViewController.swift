//
//  DetailParkingViewController.swift
//  EcoPark
//
//  Created Steve on 11/3/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import Cosmos

// use for USER
protocol DetailParkingViewControllerDelegate: class {
    func dataChanged()
}

class DetailParkingViewController: BaseViewController {
    
    var presenter: DetailParkingPresenterProtocol?
    
    @IBOutlet weak var viewRate: UIView!
    @IBOutlet weak var DLVInformationParking: DoubleLabelView!
    @IBOutlet weak var ILVContactParking: ImageLabelView!
    @IBOutlet weak var ILVPointRoad: ImageLabelView!
    @IBOutlet weak var VTDate: TimeView!
    @IBOutlet weak var VTHour: TimeView!
    @IBOutlet weak var VTMinute: TimeView!
    @IBOutlet weak var DLVBook: DoubleLabelView!
    @IBOutlet weak var DLVExpected: DoubleLabelView!
    @IBOutlet weak var DLVCheckIn: DoubleLabelView!
    @IBOutlet weak var DLVCheckOut: DoubleLabelView!
    @IBOutlet weak var DLVLisencePlate: DoubleLabelView!
    @IBOutlet weak var DLVBillForHour: DoubleLabelView!
    @IBOutlet weak var DLVBillFor8Hour: DoubleLabelView!
    @IBOutlet weak var DLVNumberParking: DoubleLabelView!
    @IBOutlet weak var DLVMoneyPayment: DoubleLabelView!
    @IBOutlet weak var DLVPriceParking: DoubleLabelView!
    @IBOutlet weak var DLVAddForWallet: DoubleLabelView!
    @IBOutlet weak var DLVAddForMoney: DoubleLabelView!
    @IBOutlet weak var btnCancel: UIButton!
    @IBOutlet weak var btnExtend: UIButton!
    @IBOutlet weak var btnBottom: UIButton!
    @IBOutlet weak var heightOfRating: NSLayoutConstraint!
    @IBOutlet weak var heightOfButtonCancel: NSLayoutConstraint!
    @IBOutlet weak var heightOfButtonExtend: NSLayoutConstraint!
    
    @IBOutlet weak var lbBookingNumber: UILabel!
    @IBOutlet weak var lbName: UILabel!
    @IBOutlet weak var lbAddress: UILabel!
    @IBOutlet weak var lbStatus: UILabel!
    
    @IBOutlet weak var lbRating: UILabel!
    @IBOutlet weak var vRating: CosmosView!
    @IBOutlet weak var parkingTime: UILabel!
    
    //    var type : TypeDetailParking = .checkin
    var bookingParking: HistoryBookingParkingResponse?
    var bookingDetailEntity: BookingDetailEntity?
    
    var newCurrentDate: Double = 0
    weak var delegate: DetailParkingViewControllerDelegate?
    
    var timer: Timer?
    
    override func setUpViews() {
        super.setUpViews()
        
        ILVContactParking.initView(image: #imageLiteral(resourceName: "ic_call"), title: LocalizableKey.contactParking.showLanguage)
        ILVPointRoad.initView(image: #imageLiteral(resourceName: "ic_direction"), title: LocalizableKey.titleDirection.showLanguage)
        DLVInformationParking.setupViewForTitle(title: LocalizableKey.infoParking.showLanguage)
        VTDate.setupTitle(title: LocalizableKey.date.showLanguage)
        VTHour.setupTitle(title: LocalizableKey.hour.showLanguage)
        VTMinute.setupTitle(title: LocalizableKey.minute.showLanguage)
        DLVBook.setupViewTimeBlue(title: LocalizableKey.book_at.showLanguage)
        DLVExpected.setupViewTimeBlue(title: LocalizableKey.expect.showLanguage)
        DLVCheckIn.setupViewTimeBlue(title: "Check in")
        DLVCheckOut.setupViewTimeBlue(title: "Check out")
        DLVLisencePlate.setupViewTimeBold(title: LocalizableKey.licensePlate.showLanguage + ":")
        DLVBillForHour.setupViewUnit(title:  LocalizableKey.priceAHours.showLanguage + ":")
        DLVBillFor8Hour.setupViewUnit(title: LocalizableKey.priceCombo.showLanguage + ":")
        DLVNumberParking.setupViewUnit(title: LocalizableKey.NumberHoursSend.showLanguage + ":")
        DLVMoneyPayment.setupViewUnit(title: LocalizableKey.ParkingFee.showLanguage + ":")
        DLVPriceParking.setupViewUnit(title: LocalizableKey.Paid.showLanguage + ":")
        DLVAddForWallet.setupViewUnit(title: LocalizableKey.paidWithWallet.showLanguage + ":")
        DLVAddForMoney.setupViewUnitColorRed(title: LocalizableKey.paidWithCash.showLanguage + ":")
        lbRating.text = LocalizableKey.ratingOfYou.showLanguage
        btnCancel.setTitle(LocalizableKey.cancelHolding.showLanguage, for: .normal)
        btnExtend.setTitle(LocalizableKey.extend.showLanguage, for: .normal)
        btnBottom.setTitle(LocalizableKey.ratingService.showLanguage, for: .normal)
        parkingTime.text = LocalizableKey.parkingTimimg.showLanguage
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        getBookingDetail()
        
        if let detail = bookingDetailEntity {
            displayData(info: detail)
        }
        
        timer = nil
        timer = Timer.scheduledTimer(withTimeInterval: 1, repeats: true, block: { (timer) in
            self.countTime()
        })
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        getBookingDetail()
    }
    
    @IBAction func callOnwer() {
        guard let phone = self.bookingDetailEntity?.parking_details?.phone else { return }
        Utils.callPhone(phoneNumber: phone)
    }
    
    @IBAction func goToMap() {
        guard let lat = self.bookingDetailEntity?.parking_details?.lat, let long = self.bookingDetailEntity?.parking_details?.long else { return }
        Utils.goToMap(latitude: lat.description, longitude: long.description)
    }
    
    
    deinit {
        timer?.invalidate()
    }
    
    override func setUpNavigation() {
        super.setUpNavigation()
        setTitleNavigation(title: LocalizableKey.titleHistoryDetail.showLanguage)
        addBackToNavigation()
    }
    
    func countTime() {
        let status = bookingDetailEntity?.status&
        switch status& {
        case StatusBooking.checked_in.rawValue:
            guard let checkInTime = bookingDetailEntity?.time_check_in?.timeIntervalSince1970 else { return }
            newCurrentDate = newCurrentDate + 1
            let ddhhmm = Utils.getTime(dateCheckIn: checkInTime, currentServerDate: newCurrentDate)
            
            VTHour.setUpTime(time: ddhhmm.1)
            VTMinute.setUpTime(time: ddhhmm.2)
            VTDate.setUpTime(time: ddhhmm.0)
            
            let numberParking = ddhhmm.0 * 24 + ddhhmm.1
            if status& != StatusBooking.checked_in.rawValue {
                DLVNumberParking.setValueText(text: numberParking.description + " " + LocalizableKey.hour.showLanguage)
            }
            
        case StatusBooking.checked_out.rawValue:
            guard let checkInTime = bookingDetailEntity?.time_check_in?.timeIntervalSince1970,let checkOutTime = bookingDetailEntity?.time_check_out?.timeIntervalSince1970 else { return }
            let ddhhmm = Utils.getTime(dateCheckIn: checkInTime, currentServerDate: checkOutTime)
            
            VTHour.setUpTime(time: ddhhmm.1)
            VTMinute.setUpTime(time: ddhhmm.2)
            VTDate.setUpTime(time: ddhhmm.0)
            
            let numberParking = ddhhmm.0 * 24 + ddhhmm.1
            if status& != StatusBooking.checked_in.rawValue {
                DLVNumberParking.setValueText(text: numberParking.description + " " + LocalizableKey.hour.showLanguage)
            }
            
        default:
            break
        }
        
        
        
    }
    
    override func btnBackTapped() {
        timer?.invalidate()
        self.navigationController?.popToRootViewController(animated: true)
    }
    
    func displayData(info: BookingDetailEntity) {
        bookingDetailEntity = info
        showGeneralInfo(info: info)
        if let timeCurrent = info.current_server_time?.timeIntervalSince1970 {
            newCurrentDate = timeCurrent
        }
        
        
        let status = info.status&
        switch status {
        case StatusBooking.reservation.rawValue:
            //--
            lbStatus.text = LocalizableKey.reservation.showLanguage
            lbStatus.textColor = AppColor.color_255_145_0
            
            // hidden rating
            viewRate.isHidden = false
            heightOfRating.constant = 0
            btnBottom.setTitle(LocalizableKey.ScanCheckIn.showLanguage, for: .normal)
        case StatusBooking.checked_in.rawValue:
            lbStatus.text = LocalizableKey.statusCheckedIn.showLanguage
            lbStatus.textColor = AppColor.color_13_196_68
            showMoney(info: info)
            btnBottom.setTitle("QR Check Out", for: .normal)
            heightOfRating.constant = 0
            heightOfButtonCancel.constant = 0
            heightOfButtonExtend.constant = 0
            
        case StatusBooking.checked_out.rawValue:
            lbStatus.text = LocalizableKey.statusCheckedOut.showLanguage
            lbStatus.textColor = AppColor.color_0_129_255
            showMoney(info: info)
            btnBottom.setTitle(LocalizableKey.ratingService.showLanguage, for: .normal)
            heightOfRating.constant = 0
            heightOfButtonCancel.constant = 0
            heightOfButtonExtend.constant = 0
            
            if let rating = info.rating, rating != 0 {
                vRating.rating = Double(rating)
                heightOfRating.constant = 50
                btnBottom.isHidden = true
            }
            
        case StatusBooking.cancel.rawValue:
            lbStatus.text = LocalizableKey.canceled.showLanguage
            lbStatus.textColor = UIColor.red
            showMoney(info: info)
            btnBottom.setTitle(LocalizableKey.ratingService.showLanguage, for: .normal)
            heightOfButtonCancel.constant = 0
            heightOfButtonExtend.constant = 0
            heightOfRating.constant = 0
            btnBottom.isHidden = true
        case StatusBooking.expired.rawValue:
            lbStatus.text = LocalizableKey.expired.showLanguage
            lbStatus.textColor = UIColor.red
            showMoney(info: info)
            btnBottom.setTitle(LocalizableKey.ratingService.showLanguage, for: .normal)
            heightOfRating.constant = 0
            btnBottom.isHidden = true
            
        default:
            break
        }
        
    }
    
    private func showMoney(info: BookingDetailEntity) {
        if info.status& != StatusBooking.checked_in.rawValue {
            if let moneyPaid = info.money_paid {
                DLVMoneyPayment.setValueText(text: moneyPaid.toCurrency)
            }
            
            if let moneyPaid = info.parking_details?.price {
                DLVPriceParking.setValueText(text: moneyPaid.toCurrency)
            }
            
            
            if let moneyPaid = info.payment_wallet {
                DLVAddForWallet.setValueText(text: moneyPaid.toCurrency)
            }
            
            if let moneyPaid = info.payment {
                DLVAddForMoney.setValueText(text: moneyPaid.toCurrency)
            }
        }
    }
    
    private func showGeneralInfo(info: BookingDetailEntity) {
        lbBookingNumber.text = info.code
        if let timeStart = info.parking_details?.time_start?.toString(dateFormat: .HHmm),
            let timeEnd = info.parking_details?.time_end?.toString(dateFormat: .HHmm) {
            DLVInformationParking.setValueText(text: timeStart + " - " + timeEnd)
        }
        lbName.text = info.parking_details?.name
        lbAddress.text = info.parking_details?.address
        
        DLVCheckIn.setValueText(text: "-")
        DLVCheckOut.setValueText(text: "-")
        
        DLVNumberParking.setValueText(text: "0 " + LocalizableKey.hour.showLanguage)
        DLVMoneyPayment.setValueText(text: "0 VND")
        DLVPriceParking.setValueText(text: "0 VND")
        DLVAddForWallet.setValueText(text: "0 VND")
        DLVAddForMoney.setValueText(text: "0 VND")
        
        DLVLisencePlate.setValueText(text: info.license_plates ?? "")
        if let price = info.parking_details?.price {
            DLVBillForHour.setValueText(text: price.toCurrency)
        }
        if let packagePrice = info.parking_details?.package_price {
            DLVBillFor8Hour.setValueText(text: packagePrice.toCurrency)
        }
        // status reservation
        
        if let createTime = info.create_time {
            DLVBook.setValueText(text: createTime.toString(dateFormat: .ecoTime))
        }
        
        if let expectTime = info.intend_checkin_time {
            DLVExpected.setValueText(text: expectTime.toString(dateFormat: .ecoTime))
        }
        
        let status = info.status&
        switch status {
        case StatusBooking.reservation.rawValue:
            DLVCheckIn.setValueText(text: "-")
            DLVCheckOut.setValueText(text: "-")
//            heightPricePayment.constant = 0
//            heightAddWallet.constant = 0
//            heightAddCash.constant = 0
            
            DLVPriceParking.isHidden = true
            DLVAddForWallet.isHidden = true
            DLVAddForMoney.isHidden = true
            
        case StatusBooking.checked_in.rawValue:
            if let checkInTime = info.time_check_in {
                DLVCheckIn.setValueText(text: checkInTime.toString(dateFormat: .ecoTime))
            }
            DLVCheckOut.setValueText(text: "-")
        case StatusBooking.checked_out.rawValue:
            if let checkInTime = info.time_check_in {
                DLVCheckIn.setValueText(text: checkInTime.toString(dateFormat: .ecoTime))
            }
            if let checkOutTime = info.time_check_out {
                DLVCheckOut.setValueText(text: checkOutTime.toString(dateFormat: .ecoTime))
            }
        case StatusBooking.expired.rawValue:
            if let checkInTime = info.time_check_in {
                DLVCheckIn.setValueText(text: checkInTime.toString(dateFormat: .ecoTime))
            }
            DLVCheckOut.setValueText(text: "-")
        default:
            break
        }
    }
    
    @IBAction func btnCancelTapped() {
        cancelReservation()
    }
    
    @IBAction func btnExtendTapped() {
        extendReservation()
    }
    
    // MARK: Cancel reservation
    func cancelReservation() {
        PopUpHelper.shared.showCancelReservation(width: popUpwidth, completionYes: {
            guard let bookingId = self.bookingParking?.id else { return }
            self.presenter?.cancelReservation(id: bookingId)
        }) {
            //----
        }
        
        
    }
    
    func didCancelReservation() {
        PopUpHelper.shared.showMessage(message: LocalizableKey.cancelBookingSuccess.showLanguage, width: popUpwidth) {
            self.delegate?.dataChanged()
            self.pop()
        }
    }
    
    @IBAction func btnBottomTapped() {
        guard let status = bookingDetailEntity?.status& else { return }
        switch status {
        case StatusBooking.reservation.rawValue:
            let vc = AppQRScanerViewController.createModule(isCheckIn: true)
            vc.completionCode = { qrcode in
                guard let qrcode = qrcode as? [String] else { return }
                if qrcode.count > 2 {
                    self.presenter?.scanQRCheckIn(parkingId: qrcode[2], bossParkingId: qrcode[1])
                }
            }
            
            self.push(controller: vc)
            
        case StatusBooking.checked_in.rawValue:
            
            let vc = CheckOutRouter.createModule(bookingId: bookingDetailEntity?.id)
            self.push(controller: vc)
        case StatusBooking.checked_out.rawValue:
            PopUpHelper.shared.showRating(width: popUpwidth, completionCancel: {
                //---
            }) { number in
                guard let number = number as? Double, let bookingId =  self.bookingParking?.id else { return }
                self.presenter?.ratingBooking(bookingId: bookingId, rating: Int(number).description)
                
            }
            break
        case StatusBooking.cancel.rawValue:
            break
        default:
            break
        }
    }
}

extension DetailParkingViewController: DetailParkingViewProtocol {
    
    // MARK: Extend reservation
    func extendReservation() {
        PopUpHelper.shared.showExtendReservation(width: popUpwidth, completionYes: {
            guard let bookingId = self.bookingParking?.id else { return }
            self.presenter?.extendReservation(id: bookingId)
        }) {
            //--- no
            
        }
    }
    
    func didExtendReservation(info: BookingDetailEntity) {
        PopUpHelper.shared.showMessage(message: LocalizableKey.renewalSuccess.showLanguage, width: popUpwidth) {
            self.displayData(info: info)
        }
    }
    
    // MARK: Get booking detail
    func getBookingDetail() {
        guard let bookingId = self.bookingParking?.id else { return }
        self.presenter?.getBookingDetail(id: bookingId)
    }
    
    func didGetBookingDetail(info: BookingDetailEntity) {
        displayData(info: info)
    }
    
    // MARK: Error
    func didGetError(error: APIError) {
        printError(message: error.message)
        PopUpHelper.shared.showError(message: error.message&.showLanguage, completionYes: nil)
    }
    
    func didGetRating(rating: RatingEntity) {
        getBookingDetail()
    }
}
