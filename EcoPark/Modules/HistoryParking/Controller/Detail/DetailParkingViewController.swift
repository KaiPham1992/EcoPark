//
//  DetailParkingViewController.swift
//  EcoPark
//
//  Created Steve on 11/3/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import Cosmos

// use for USER
protocol DetailParkingViewControllerDelegate: class {
    func dataChanged()
}

class DetailParkingViewController: BaseViewController {
    
    var presenter: DetailParkingPresenterProtocol?
    
    @IBOutlet weak var viewRate: UIView!
    @IBOutlet weak var DLVInformationParking: DoubleLabelView!
    @IBOutlet weak var ILVContactParking: ImageLabelView!
    @IBOutlet weak var ILVPointRoad: ImageLabelView!
    @IBOutlet weak var VTDate: TimeView!
    @IBOutlet weak var VTHour: TimeView!
    @IBOutlet weak var VTMinute: TimeView!
    @IBOutlet weak var DLVBook: DoubleLabelView!
    @IBOutlet weak var DLVExpected: DoubleLabelView!
    @IBOutlet weak var DLVCheckIn: DoubleLabelView!
    @IBOutlet weak var DLVCheckOut: DoubleLabelView!
    @IBOutlet weak var DLVLisencePlate: DoubleLabelView!
    @IBOutlet weak var DLVBillForHour: DoubleLabelView!
    @IBOutlet weak var DLVBillFor8Hour: DoubleLabelView!
    @IBOutlet weak var DLVNumberParking: DoubleLabelView!
    @IBOutlet weak var DLVMoneyPayment: DoubleLabelView!
    @IBOutlet weak var DLVPriceParking: DoubleLabelView!
    @IBOutlet weak var DLVAddForWallet: DoubleLabelView!
    @IBOutlet weak var DLVAddForMoney: DoubleLabelView!
    @IBOutlet weak var btnCancel: UIButton!
    @IBOutlet weak var btnExtend: UIButton!
    @IBOutlet weak var btnBottom: UIButton!
    @IBOutlet weak var heightOfRating: NSLayoutConstraint!
    @IBOutlet weak var heightOfButtonCancel: NSLayoutConstraint!
    @IBOutlet weak var heightOfButtonExtend: NSLayoutConstraint!
    
    @IBOutlet weak var lbBookingNumber: UILabel!
    @IBOutlet weak var lbName: UILabel!
    @IBOutlet weak var lbAddress: UILabel!
    @IBOutlet weak var lbStatus: UILabel!
    
     @IBOutlet weak var vRating: CosmosView!
    
    //    var type : TypeDetailParking = .checkin
    var bookingParking: HistoryBookingParkingResponse?
    var bookingDetailEntity: BookingDetailEntity?
    
    weak var delegate: DetailParkingViewControllerDelegate?
    
    override func setUpViews() {
        super.setUpViews()
        
        ILVContactParking.initView(image: #imageLiteral(resourceName: "ic_call"), title: "Liên hệ bãi")
        ILVPointRoad.initView(image: #imageLiteral(resourceName: "ic_direction"), title: "Chỉ đường")
        DLVInformationParking.setupViewForTitle(title: "Thông tin bãi đỗ xe")
        VTDate.setupTitle(title: "Ngày")
        VTHour.setupTitle(title: "Giờ")
        VTMinute.setupTitle(title: "Phút")
        DLVBook.setupViewTimeBlue(title: "Đặt lúc")
        DLVExpected.setupViewTimeBlue(title: "Dự kiến")
        DLVCheckIn.setupViewTimeBlue(title: "Check in")
        DLVCheckOut.setupViewTimeBlue(title: "Check out")
        DLVLisencePlate.setupViewTimeBold(title: "Biển số:")
        DLVBillForHour.setupViewUnit(title: "Đơn giá theo giờ:")
        DLVBillFor8Hour.setupViewUnit(title: "Đơn giá gói 8 giờ:")
        DLVNumberParking.setupViewUnit(title: "Số giờ đã gửi:")
        DLVMoneyPayment.setupViewUnit(title: "Phí giữ xe:")
        DLVPriceParking.setupViewUnit(title: "Đã thanh toán:")
        DLVAddForWallet.setupViewUnit(title: "TT thêm bằng ví:")
        DLVAddForMoney.setupViewUnitColorRed(title: "TT thêm bằng tiền mặt:")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        getBookingDetail()
    }
    
    override func setUpNavigation() {
        super.setUpNavigation()
        setTitleNavigation(title: "Chi tiết giao dịch")
        addBackToNavigation()
    }
    
    override func btnBackTapped() {
        self.navigationController?.popToRootViewController(animated: true)
    }
    
    func displayData(info: BookingDetailEntity) {
        bookingDetailEntity = info
        showGeneralInfo(info: info)
        let status = info.status&
        switch status {
        case StatusBooking.reservation.rawValue:
            //--
            lbStatus.text = "Đang giữ chỗ"
            lbStatus.textColor = AppColor.color_255_145_0
            
            // hidden rating
            viewRate.isHidden = false
            heightOfRating.constant = 0
            
            //
            btnBottom.setTitle("Scan QR tại bãi để Check In", for: .normal)
        case StatusBooking.checked_in.rawValue:
            lbStatus.text = "Đã check in"
            lbStatus.textColor = AppColor.color_13_196_68
            showMoney(info: info)
            btnBottom.setTitle("QR Check Out", for: .normal)
            heightOfRating.constant = 0
            heightOfButtonCancel.constant = 0
            heightOfButtonExtend.constant = 0
            
        case StatusBooking.checked_out.rawValue:
            lbStatus.text = "Đã check out"
            lbStatus.textColor = AppColor.color_0_129_255
            showMoney(info: info)
            btnBottom.setTitle("Đánh giá dịch vụ bãi giữ xe", for: .normal)
            heightOfRating.constant = 0
            heightOfButtonCancel.constant = 0
            heightOfButtonExtend.constant = 0
            
            if let rating = info.rating, rating != 0 {
                vRating.rating = Double(rating)
                heightOfRating.constant = 50
            }
            
        case StatusBooking.cancel.rawValue:
            lbStatus.text = "Đã huỷ"
            lbStatus.textColor = UIColor.red
            showMoney(info: info)
            btnBottom.setTitle("Đánh giá dịch vụ bãi giữ xe", for: .normal)
            heightOfRating.constant = 0
            heightOfButtonCancel.constant = 0
            heightOfButtonExtend.constant = 0
            btnBottom.isHidden = true
        default:
            break
        }
        
    }
    
    private func showMoney(info: BookingDetailEntity) {
        if let moneyPaid = info.money_paid {
            DLVMoneyPayment.setValueText(text: moneyPaid.toCurrency)
        }
        
        if let moneyPaid = info.parking_details?.price {
            DLVPriceParking.setValueText(text: moneyPaid.toCurrency)
        }
        
        if let moneyPaid = info.payment_wallet {
            DLVAddForWallet.setValueText(text: moneyPaid.toCurrency)
        }
        
        if let moneyPaid = info.payment {
            DLVAddForMoney.setValueText(text: moneyPaid.toCurrency)
        }
        
    }
    
    private func showGeneralInfo(info: BookingDetailEntity) {
        lbBookingNumber.text = info.code
        if let timeStart = info.parking_details?.time_start?.toString(dateFormat: .HHmm),
            let timeEnd = info.parking_details?.time_end?.toString(dateFormat: .HHmm) {
            DLVInformationParking.setValueText(text: timeStart + " - " + timeEnd)
        }
        lbName.text = info.parking_details?.name
        lbAddress.text = info.parking_details?.address
        
        DLVCheckIn.setValueText(text: "-")
        DLVCheckOut.setValueText(text: "-")
        
        DLVNumberParking.setValueText(text: "0 giờ")
        DLVMoneyPayment.setValueText(text: "0 VND")
        DLVPriceParking.setValueText(text: "0 VND")
        DLVAddForWallet.setValueText(text: "0 VND")
        DLVAddForMoney.setValueText(text: "0 VND")
        
        DLVLisencePlate.setValueText(text: info.license_plates ?? "")
        if let price = info.parking_details?.price {
            DLVBillForHour.setValueText(text: price.toCurrency)
        }
        if let packagePrice = info.parking_details?.package_price {
            DLVBillFor8Hour.setValueText(text: packagePrice.toCurrency)
        }
        // status reservation
        
        if let createTime = info.create_time {
            DLVBook.setValueText(text: createTime.toString(dateFormat: .ecoTime))
        }
        if let intendCheck = info.intend_checkin_time {
            DLVExpected.setValueText(text: intendCheck.toString(dateFormat: .ecoTime))
        }
        
        if let timeCheckIn = info.time_check_in {
            DLVCheckIn.setValueText(text: timeCheckIn.toString(dateFormat: .ecoTime))
        }
        
        if let timeCheckOut = info.time_check_out {
            DLVCheckIn.setValueText(text: timeCheckOut.toString(dateFormat: .ecoTime))
        }
        
        
    }
    
    @IBAction func btnCancelTapped() {
        cancelReservation()
    }
    
    @IBAction func btnExtendTapped() {
        extendReservation()
    }
    
    // MARK: Cancel reservation
    func cancelReservation() {
        PopUpHelper.shared.showCancelReservation(width: popUpwidth, completionYes: {
            guard let bookingId = self.bookingParking?.id else { return }
            self.presenter?.cancelReservation(id: bookingId)
        }) {
            //----
        }
        
        
    }
    
    func didCancelReservation() {
        PopUpHelper.shared.showMessage(message: "Huỷ đặt chỗ thành công", width: popUpwidth) {
            self.delegate?.dataChanged()
            self.pop()
        }
    }
    
    @IBAction func btnBottomTapped() {
        guard let status = bookingDetailEntity?.status& else { return }
        switch status {
        case StatusBooking.reservation.rawValue:
            let vc = AppQRScanerViewController.createModule(isCheckIn: true)
            vc.completionCode = { bossParkingId in
                guard let parkingId = self.bookingParking?.parking_id else { return }
                self.presenter?.scanQRCheckIn(parkingId: parkingId, bossParkingId: bossParkingId&)
            }
            
            self.push(controller: vc)
            
        case StatusBooking.checked_in.rawValue:
            guard let bookingId =  bookingParking?.id, let licensePlate = bookingParking?.license_plates else { return }
            presenter?.scanQRCheckOut(bookingId: bookingId, code: "1222222", licensePlates: licensePlate)
            break
        case StatusBooking.checked_out.rawValue:
            PopUpHelper.shared.showRating(width: popUpwidth, completionCancel: {
                //---
            }) { number in
                guard let number = number as? Double, let bookingId =  self.bookingParking?.id else { return }
                
                self.presenter?.ratingBooking(bookingId: bookingId, rating: Int(number).description)
                
            }
            break
        case StatusBooking.cancel.rawValue:
            break
        default:
            break
        }
    }
}

extension DetailParkingViewController: DetailParkingViewProtocol {
    
    // MARK: Extend reservation
    func extendReservation() {
        PopUpHelper.shared.showExtendReservation(width: popUpwidth, completionYes: {
            guard let bookingId = self.bookingParking?.id else { return }
            self.presenter?.extendReservation(id: bookingId)
        }) {
            //--- no
            
        }
    }
    
    func didExtendReservation(info: BookingDetailEntity) {
        PopUpHelper.shared.showMessage(message: "Bạn đã gia hạn thành công", width: popUpwidth) {
            self.displayData(info: info)
        }
    }
    
    // MARK: Get booking detail
    func getBookingDetail() {
        guard let bookingId = self.bookingParking?.id else { return }
        self.presenter?.getBookingDetail(id: bookingId)
    }
    
    func didGetBookingDetail(info: BookingDetailEntity) {
        displayData(info: info)
    }
    
    // MARK: Error
    func didGetError(error: APIError) {
        printError(message: error.message)
        PopUpHelper.shared.showError(message: error.message&.showLanguage, completionYes: nil)
    }
    
    func didGetRating(rating: RatingEntity) {
        getBookingDetail()
    }
}
