//
//  SignUpViewController.swift
//  EnglishApp
//
//  Created Kai Pham on 5/11/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class SignUpViewController: BaseViewController {
    
    var presenter: SignUpPresenterProtocol?
    @IBOutlet weak var vUsername: AppTextField!
    @IBOutlet weak var vDisplayName: AppTextField!
    @IBOutlet weak var vEmail: AppTextField!
    @IBOutlet weak var vPassword: AppTextField!
    @IBOutlet weak var vRePassword: AppTextField!
    @IBOutlet weak var vPhoneNumber: AppTextField!
    @IBOutlet weak var vCapcha: AppTextField!
    @IBOutlet weak var btnSignUp: UIButton!
    @IBOutlet weak var lbStatus: UILabel!
    @IBOutlet weak var imgCaptcha: UIImageView!
    @IBOutlet weak var lbNotice: UILabel!
    @IBOutlet weak var vGender: AppDropDown!
    @IBOutlet weak var vBirthDay: AppDateDropDown!
    @IBOutlet weak var lbTermAndPolicy: UILabel!
    
    @IBOutlet weak var heightError: NSLayoutConstraint!
    
    var passwordText: String = ""
    var rePasswordText: String = ""
    var genderSelect: String = ""
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        presenter?.getCaptcha()
        addBackToNavigation()
    }
    
    
    override func setTitleUI() {
//        self.hideNavigation()
        self.showNavigation()
        self.setTitleNavigation(title: LocalizableKey.LoginButtonSignUp.showLanguage)
        vUsername.setTitleAndPlaceHolder(title: LocalizableKey.usernameSignUp.showLanguage, placeHolder: LocalizableKey.enter.showLanguage)
        vEmail.setTitleAndPlaceHolder(title: LocalizableKey.emailSignUp.showLanguage, placeHolder: LocalizableKey.enter.showLanguage)
        
        vPassword.setTitleAndPlaceHolder(title: LocalizableKey.passwordSignUp.showLanguage, placeHolder: LocalizableKey.enter.showLanguage)
        vRePassword.setTitleAndPlaceHolder(title: LocalizableKey.rePasswordSignUp.showLanguage, placeHolder: LocalizableKey.enter.showLanguage)
        vPhoneNumber.setTitleAndPlaceHolder(title: LocalizableKey.phoneNumberSignUp.showLanguage, placeHolder: LocalizableKey.enter.showLanguage)
        vDisplayName.setTitleAndPlaceHolder(title: LocalizableKey.displaynameSignUp.showLanguage, placeHolder: LocalizableKey.enter.showLanguage)
        vCapcha.setTitleAndPlaceHolder(title: LocalizableKey.capcha.showLanguage, placeHolder: LocalizableKey.enterCaptcha.showLanguage)
        lbNotice.text = LocalizableKey.notice.showLanguage
        
        vGender.backgroundColor = .black
        vBirthDay.backgroundColor = .black
        
        vGender.setTitleAndPlaceHolder(title: LocalizableKey.gender.showLanguage, placeHolder: LocalizableKey.select.showLanguage)
        vBirthDay.setTitleAndPlaceHolder(title: LocalizableKey.birthday.showLanguage, placeHolder: LocalizableKey.select.showLanguage)
        btnSignUp.setTitle(LocalizableKey.LoginButtonSignUp.showLanguage, for: .normal)
        
        vGender.delegateDropDown = self
        
        vPassword.tfInput.isSecureTextEntry = true
        vRePassword.tfInput.isSecureTextEntry = true
        vPassword.tfInput.delegate = self
        vRePassword.tfInput.delegate = self
        
        vGender.listItem = [LocalizableKey.male.showLanguage, LocalizableKey.female.showLanguage, LocalizableKey.other.showLanguage]
        setTextTermAndPolicy()
    }
    
    private func setTextTermAndPolicy() {
        let attr1 = LocalizableKey.termAndPolicyText1.showLanguage.toAttributedString(color: AppColor.white, font: AppFont.fontRegular15, isUnderLine: false)
        
        let attr2 = LocalizableKey.termAndPolicyText2.showLanguage.toAttributedString(color: AppColor.color_82_240_249, font: AppFont.fontRegular15, isUnderLine: true)
        
        let attr3 = LocalizableKey.termAndPolicyText3.showLanguage.toAttributedString(color: AppColor.white, font: AppFont.fontRegular15, isUnderLine: false)
        
        let attr4 = LocalizableKey.termAndPolicyText4.showLanguage.toAttributedString(color: AppColor.color_82_240_249, font: AppFont.fontRegular15, isUnderLine: true)
        
        let attr5 = LocalizableKey.termAndPolicyText5.showLanguage.toAttributedString(color: AppColor.white, font: AppFont.fontRegular15, isUnderLine: false)
        
        let attr6 = LocalizableKey.termAndPolicyText6.showLanguage.toAttributedString(color: AppColor.color_0_129_255, font: AppFont.fontBold15, isUnderLine: false)
        
        let attr = NSMutableAttributedString()
        attr.append(attr1)
        attr.append(attr2)
        attr.append(attr3)
        attr.append(attr4)
        attr.append(attr5)
        attr.append(attr6)
        
        lbTermAndPolicy.attributedText = attr
        self.lbTermAndPolicy.isUserInteractionEnabled = true
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(tapOnlabel(_ :)))
        tapGesture.numberOfTapsRequired = 1
        self.lbTermAndPolicy.addGestureRecognizer(tapGesture)
    }
    
    @objc func tapOnlabel(_ gesture: UITapGestureRecognizer) {
        guard let text = lbTermAndPolicy.text else { return }
        let termOfUse = (text as NSString).range(of: LocalizableKey.termAndPolicyText2.showLanguage)
        let policy = (text as NSString).range(of: LocalizableKey.termAndPolicyText4.showLanguage)
        if gesture.didTapAttributedTextInLabel(label: lbTermAndPolicy, inRange: termOfUse) {
            let webView = WebViewController.createModule(isTermCondition: true)
            webView.isSignUp = true
            self.push(controller: webView)
        } else if gesture.didTapAttributedTextInLabel(label: lbTermAndPolicy, inRange: policy) {
            let webView = WebViewController.createModule(isTermCondition: false)
            webView.isSignUp = true
            self.push(controller: webView)
        }
    }
    
    
    @IBAction func btnSignUpTapped() {
        dismissKeyBoard()
        heightError.constant = 0
        //vPassword.getText()
        
        if self.vGender.tfInput.text == "Nữ" {
            self.vGender.tfInput.text = "female"
        }
        else if self.vGender.tfInput.text == "Nam" {
            self.vGender.tfInput.text = "male"
        }
        else if self.vGender.tfInput.text == "Khác" {
            self.vGender.tfInput.text = "other"
        }
        
        if validateInputData() {
            let param = SignUpParam(email: vEmail.getText(), password: passwordText.sha256(), captcha: vCapcha.tfInput.text&, displayName: vDisplayName.getText(), username: vUsername.getText(), phone: vPhoneNumber.getText(), gender: vGender.tfInput.text, birthDay: vBirthDay.tfInput.text)
            
            presenter?.signUp(param: param)
        }
    }
    
    @IBAction func btnReloadCaptcha() {
        dismissKeyBoard()
        presenter?.getCaptcha()
    }
}

extension SignUpViewController {
    func validateInputData() -> Bool {
       

        if self.vUsername.tfInput.text == "" && self.vEmail.tfInput.text == "" && self.vPassword.tfInput.text == "" && self.vRePassword.tfInput.text == "" && self.vCapcha.tfInput.text == "" {
            hideError(isHidden: false, message: LocalizableKey.emptyLoginEmailPassword.showLanguage)
            return false
        }

        if self.vUsername.tfInput.text == "" {
            hideError(isHidden: false, message: LocalizableKey.pleaseEnterDisplayName.showLanguage)
            return false
        }
        
        if self.vUsername.tfInput.text&.hasSpecialCharacters() {
                hideError(isHidden: false, message: LocalizableKey.invalidTextSpecial.showLanguage)
                return false
        }

        if self.vEmail.tfInput.text == "" {
            hideError(isHidden: false, message: LocalizableKey.pleaseEnterEmail.showLanguage)
            return false
        }

        if let email = self.vEmail.tfInput.text, email.isValidEmail() == false {
            hideError(isHidden: false, message:  LocalizableKey.invalidLoginEmail.showLanguage)
            return false
        }

        if self.vPassword.tfInput.text == "" {
            hideError(isHidden: false, message: LocalizableKey.pleaseEnterPassword.showLanguage)
            return false
        }

        if let password = self.vPassword.tfInput.text, password.count < 6 {
            hideError(isHidden: false, message:  LocalizableKey.invalidLoginPassword.showLanguage)
            return false
        }

        if self.vRePassword.tfInput.text == "" {
            hideError(isHidden: false, message: LocalizableKey.pleaseEnterRePassword.showLanguage)
            return false
        }

//        if self.vPassword.tfInput.text& != self.vRePassword.tfInput.text& {
        if self.passwordText != rePasswordText {
            hideError(isHidden: false, message:  LocalizableKey.passwordDifference.showLanguage)
            return false
        }

        if self.vCapcha.tfInput.text == "" || self.vCapcha.tfInput.text&.contains(" ") || self.vCapcha.tfInput.text&.hasSpecialCharacters()   {
            hideError(isHidden: false, message:  LocalizableKey.emptyCapcha.showLanguage)
            return false
        }
        hideError()
        return true
    }
    
    func hideError(isHidden: Bool = true, message: String? = nil){
        lbStatus.isHidden = isHidden
        lbStatus.text = message ?? ""
        heightError.constant = 40
    }
}


extension SignUpViewController: SignUpViewProtocol {
   
    func successCaptcha(image: UIImage) {
        imgCaptcha.image = image
    }
    
    func signUpSuccess(user: UserEntity?) {
        guard let _user = user else { return }
                   UserDefaultHelper.shared.saveUser(user: _user)
        
        PopUpHelper.shared.showMessage(message: LocalizableKey.signUpSuccess.showLanguage, width: 350, completion: {
           
            //----
            AppRouter.shared.openHomeView()
        })
    }
    
    func signUpError(error: APIError) {
        presenter?.getCaptcha()
        hideError(isHidden: false, message:  error.message&.showLanguage)
    }
}

extension SignUpViewController: UITextFieldDelegate {
    
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        
        if textField == vPassword.tfInput {
            
            var hashPassword = String()
            let newChar = string.first
            let offsetToUpdate = passwordText.index(passwordText.startIndex, offsetBy: range.location)
            
            if string == "" {
                passwordText.remove(at: offsetToUpdate)
                return true
            }
            else { passwordText.insert(newChar!, at: offsetToUpdate) }
            
            for _ in 0 ..< passwordText.count {  hashPassword += "*" }
            textField.text = hashPassword
            if textField.text&.count > 0 {
//                vPassword.textFieldDidChanged(vPassword.tfInput)
            }
            print(self.passwordText)
            return false
        } else if textField == vRePassword.tfInput {
            var hashPassword = String()
            let newChar = string.first
            let offsetToUpdate = rePasswordText.index(passwordText.startIndex, offsetBy: range.location)
            
            if string == "" {
                rePasswordText.remove(at: offsetToUpdate)
                return true
            }
            else { rePasswordText.insert(newChar!, at: offsetToUpdate) }
            
            for _ in 0 ..< rePasswordText.count {  hashPassword += "*" }
            textField.text = hashPassword
            if textField.text&.count > 0 {
//                vRePassword.textFieldDidChanged(vRePassword.tfInput)
            }
            print(self.rePasswordText)
            return false
        }
        return true
    }
}

extension SignUpViewController: AppTextFieldDropDownDelegate {
    func didChangedValue(sender: AppDropDown, item: Any, index: Int) {
        self.genderSelect = item as! String
        vGender.tfInput.text = genderSelect
    }
}

extension UITapGestureRecognizer {
    
    func didTapAttributedTextInLabel(label: UILabel, inRange targetRange: NSRange) -> Bool {
        // Create instances of NSLayoutManager, NSTextContainer and NSTextStorage
        let layoutManager = NSLayoutManager()
        let textContainer = NSTextContainer(size: CGSize.zero)
        let textStorage = NSTextStorage(attributedString: label.attributedText!)
        
        // Configure layoutManager and textStorage
        layoutManager.addTextContainer(textContainer)
        textStorage.addLayoutManager(layoutManager)
        
        // Configure textContainer
        textContainer.lineFragmentPadding = 0.0
        textContainer.lineBreakMode = label.lineBreakMode
        textContainer.maximumNumberOfLines = label.numberOfLines
        let labelSize = label.bounds.size
        textContainer.size = labelSize
        
        // Find the tapped character location and compare it to the specified range
        let locationOfTouchInLabel = self.location(in: label)
        let textBoundingBox = layoutManager.usedRect(for: textContainer)
        let textContainerOffset = CGPoint(x: (labelSize.width - textBoundingBox.size.width) * 0.5 - textBoundingBox.origin.x,
                                          y: (labelSize.height - textBoundingBox.size.height) * 0.5 - textBoundingBox.origin.y);
        let locationOfTouchInTextContainer = CGPoint(x: locationOfTouchInLabel.x - textContainerOffset.x,
                                                     y: locationOfTouchInLabel.y - textContainerOffset.y);
        let indexOfCharacter = layoutManager.characterIndex(for: locationOfTouchInTextContainer, in: textContainer, fractionOfDistanceBetweenInsertionPoints: nil)
        
        return NSLocationInRange(indexOfCharacter, targetRange)
    }
    
}
