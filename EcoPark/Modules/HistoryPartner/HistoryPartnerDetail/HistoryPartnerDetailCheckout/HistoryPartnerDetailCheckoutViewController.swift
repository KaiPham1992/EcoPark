//
//  HistoryPartnerDetailCheckoutViewController.swift
//  EcoPark
//
//  Created Tu DV on 11/20/19.
//  Copyright Â© 2019 demo. All rights reserved.
//
//  Template generated by Juanpe CatalÃ¡n @JuanpeCMiOS
//

import UIKit

class HistoryPartnerDetailCheckoutViewController: BaseViewController, HistoryPartnerDetailCheckoutViewProtocol {

    @IBOutlet weak var lbID: UILabel!
    @IBOutlet weak var lbStatus: UILabel!
    @IBOutlet weak var tbCheckoutDetail: UITableView!
    
    var presenter: HistoryPartnerDetailCheckoutPresenterProtocol?

    var historyParkingDetail: HistoryBookingParkingResponse?
    var bookingID = ""
    var parkingID = ""
    var isFromList = false
    
    override func viewDidLoad() {
        super.viewDidLoad()
        if isFromList {
            addBackToNavigation()
        } else {
            addMenu()
        }
        
        setTitleNavigation(title: LocalizableKey.titleHistoryDetail.showLanguage)
        configTableView()
        lbID.text = historyParkingDetail?.code
        
            getData()
    }
    
    func getData() {
        presenter?.getCheckoutDetail(bookingID: bookingID, parkingID: parkingID)
    }
    
    func didGetCheckoutDetail(historyDetail: HistoryBookingParkingResponse?) {
        self.historyParkingDetail = historyDetail
        lbID.text = historyDetail?.code ?? ""
        switch historyDetail?.status {
        case StatusBooking.checked_out.rawValue:
            lbStatus.text = LocalizableKey.checked_out.showLanguage
        case StatusBooking.expired.rawValue:
            lbStatus.text = LocalizableKey.expired.showLanguage
            lbStatus.textColor = .red
        case StatusBooking.cancel.rawValue:
            lbStatus.text = LocalizableKey.canceled.showLanguage
            lbStatus.textColor = .red
        default:
            break
        }
        
        tbCheckoutDetail.reloadData()
    }
}

extension HistoryPartnerDetailCheckoutViewController: UITableViewDataSource, UITableViewDelegate {
    
    func configTableView() {
        tbCheckoutDetail.dataSource = self
        tbCheckoutDetail.delegate = self
        
        tbCheckoutDetail.registerXibFile(TimeParkingCell.self)
        tbCheckoutDetail.registerXibFile(UserInfoCell.self)
        tbCheckoutDetail.registerXibFile(PriceCheckoutCell.self)
        tbCheckoutDetail.registerXibFile(OtherPriceCheckoutCell.self)
        tbCheckoutDetail.registerXibFile(RatingCell.self)
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if historyParkingDetail?.rating == nil {
            return 4
        } else {
            return 5
        }
        
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        switch indexPath.row {
        case 0:
            let timeHoldingCell = tableView.dequeueTableCell(TimeParkingCell.self)
            timeHoldingCell.setDataCheckout(historyParkingDetail: historyParkingDetail)
            return timeHoldingCell
        case 1:
            let userInfoCell = tableView.dequeueTableCell(UserInfoCell.self)
            userInfoCell.setData(historyParkingDetail: historyParkingDetail)
            return userInfoCell
        case 2:
            let priceCell = tableView.dequeueTableCell(PriceCheckoutCell.self)
            priceCell.setData(historyParkingDetail: historyParkingDetail)
            return priceCell
        case 3:
            let otherPriceCell = tableView.dequeueTableCell(OtherPriceCheckoutCell.self)
            otherPriceCell.setData(historyParkingDetail: historyParkingDetail)
            return otherPriceCell
        case 4:
            let ratingCell = tableView.dequeueTableCell(RatingCell.self)
            ratingCell.vRating.rating = historyParkingDetail?.rating ?? 0
            return ratingCell
        default:
            return UITableViewCell()
        }
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        switch indexPath.row {
        case 0:
            return 230
        case 1:
            return 145
        case 2:
            return 230
        case 3:
            return 170
        case 4:
            return 50
        default:
            return 0
        }
    }
}
