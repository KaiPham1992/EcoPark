//
//  SignUpPartnerStep2ViewController.swift
//  EnglishApp
//
//  Created Tu DV on 10/30/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class SignUpPartnerStep2ViewController: BaseViewController {

    @IBOutlet weak var vStep: PartnerStepView!
    @IBOutlet weak var lbParking: UILabel!
    @IBOutlet weak var vParkingName: AppTextField!
    @IBOutlet weak var vParkingType: AppDropDown!
    @IBOutlet weak var vParkingCapacity: AppTextField!
    @IBOutlet weak var vParkingAddress: AppTextView!
    @IBOutlet weak var vOpen: AppTextField!
    @IBOutlet weak var vClose: AppTextField!
    @IBOutlet weak var lbPrice: UILabel!
    @IBOutlet weak var vPriceAHours: AppTextField!
    @IBOutlet weak var vPriceCombo: AppTextField!
    @IBOutlet weak var lbLicense: UILabel!
    @IBOutlet weak var vTaxCode: AppTextField!
    @IBOutlet weak var lbFrontPhoto: UILabel!
    @IBOutlet weak var lbBacksidePhoto: UILabel!
    @IBOutlet weak var imgFrontPhoto: UIImageView!
    @IBOutlet weak var imgBacksidePhoto: UIImageView!
    @IBOutlet weak var btnDeletePhotoFront: UIButton!
    @IBOutlet weak var btnDeletePhotoBacksite: UIButton!
    @IBOutlet weak var btnNext: UIButton!
    @IBOutlet weak var lbError: UILabel!
	var presenter: SignUpPartnerStep2PresenterProtocol?

    var param: BossRegisterParam?
    var parkingTypeID: String?
    
    let datePickerTimeOpen = UIDatePicker()
    let formatterTimeOpen = DateFormatter()
    let datePickerTimeClose = UIDatePicker()
    let formatterTimeClose = DateFormatter()

    
	override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        presenter?.getListParkingType()
    }
    
    private func setupUI() {
        setTitleNavigation(title: LocalizableKey.MenuSignUpPartner.showLanguage)
        addBackToNavigation()
        vStep.setStep2()
        lbParking.text = LocalizableKey.parkingInfo.showLanguage.uppercased()
        lbPrice.text = LocalizableKey.parkingPrice.showLanguage.uppercased()
        lbLicense.text = LocalizableKey.parkingLicense.showLanguage.uppercased()
        
        vParkingName.setTitleAndPlaceHolder(title: LocalizableKey.parkingName.showLanguage, placeHolder: LocalizableKey.enter.showLanguage)
        vParkingType.setTitleAndPlaceHolder(title: LocalizableKey.parkingType.showLanguage, placeHolder: LocalizableKey.select.showLanguage)
        vParkingCapacity.setTitleAndPlaceHolder(title: LocalizableKey.parkingCapacity.showLanguage, placeHolder: LocalizableKey.enter.showLanguage)
        vParkingAddress.setTitleAndPlaceHolder(title: LocalizableKey.parkingAddress.showLanguage, placeHolder: LocalizableKey.enter.showLanguage)
        vParkingAddress.setPlaceHolder(placeHolder: LocalizableKey.enter.showLanguage)
        vOpen.setTitleAndPlaceHolder(title: LocalizableKey.parkingOpen.showLanguage, placeHolder: LocalizableKey.enter.showLanguage)
        vClose.setTitleAndPlaceHolder(title: LocalizableKey.parkingClose.showLanguage, placeHolder: LocalizableKey.enter.showLanguage)
        vPriceAHours.setTitleAndPlaceHolder(title: LocalizableKey.pirceAHours.showLanguage, placeHolder: LocalizableKey.enter.showLanguage)
        vPriceCombo.setTitleAndPlaceHolder(title: LocalizableKey.priceCombo.showLanguage, placeHolder: LocalizableKey.enter.showLanguage)
        vTaxCode.setTitleAndPlaceHolder(title: LocalizableKey.parkingTaxCode.showLanguage, placeHolder: LocalizableKey.enter.showLanguage)
        vParkingCapacity.tfInput.keyboardType = .numberPad
        vPriceAHours.tfInput.keyboardType = .numberPad
        vPriceCombo.tfInput.keyboardType = .numberPad
        
        lbFrontPhoto.text = LocalizableKey.photoFront.showLanguage
        lbBacksidePhoto.text = LocalizableKey.photoBackside.showLanguage
        btnNext.setTitle(LocalizableKey.next.showLanguage, for: .normal)
        btnDeletePhotoFront.isHidden = true
        btnDeletePhotoBacksite.isHidden = true
        vParkingType.delegateDropDown = self
        setTime()
    }
    
    @IBAction func btnPhotoFrontTapped() {
        SelectPhotoCanCropPopUp.shared.showCropPicker(controller: self) { image in
            guard let _iamge = image else { return }
            self.imgFrontPhoto.image = _iamge
            self.btnDeletePhotoFront.isHidden = false
        }
    }
    
    @IBAction func btnPhotoBacksideTapped() {
        SelectPhotoCanCropPopUp.shared.showCropPicker(controller: self) { image in
            guard let _iamge = image else { return }
            self.imgBacksidePhoto.image = _iamge
            self.btnDeletePhotoBacksite.isHidden = false
        }
    }
    
    @IBAction func btnDeleteFrontTapped() {
        imgFrontPhoto.image = AppImage.imgAddImage
        self.btnDeletePhotoFront.isHidden = true
    }
    
    @IBAction func btnDeleteBacksideTapped() {
        imgBacksidePhoto.image = AppImage.imgAddImage
        self.btnDeletePhotoBacksite.isHidden = true
    }
    
    @IBAction func btnNextTapped() {
        if validateInputData() {
            let param2 = BossRegisterParam(email: self.param?.email, fullname: self.param?.fullname, gender: self.param?.gender, birthday: self.param?.birthday, identity_number: self.param?.identity_number, issued_by: self.param?.issued_by, issued_date: self.param?.issued_date, cmnd_img_before_src: self.param?.cmnd_img_before_src, cmnd_img_after_src: self.param?.cmnd_img_after_src, gpkd_img_before_src: imgFrontPhoto.image, gpkd_img_after_src: imgBacksidePhoto.image, parking_name: vParkingName.getText(), parking_type_id: parkingTypeID, number_place: vParkingCapacity.getText(), parking_address: vParkingAddress.tvInput.text, time_start: vOpen.getText(), time_end: vClose.getText(), code_tax: vTaxCode.getText(), price: vPriceAHours.getText(), package_price: vPriceCombo.getText(), material: [], parking_img_src: [])
            
            self.push(controller: SignUpPartnerStep3Router.createModule(param: param2))
        }
    }
    
}


extension SignUpPartnerStep2ViewController {
    func validateInputData() -> Bool {
        if self.vParkingName.getText() == "" && self.vParkingType.tfInput.text == "" && self.vParkingCapacity.getText() == "" && self.vParkingAddress.tvInput.text == "" && vOpen.tfInput.text == "" && vClose.tfInput.text == "" && vPriceAHours.tfInput.text == "" && vPriceCombo.tfInput.text == "" {
            hideError(isHidden: false, message: LocalizableKey.emptyLoginEmailPassword.showLanguage)
            return false
        }
        
        if self.vParkingName.getText() == "" {
            hideError(isHidden: false, message: LocalizableKey.errorParkingName.showLanguage)
            return false
        }
        
        if self.vParkingType.tfInput.text == "" {
            hideError(isHidden: false, message: LocalizableKey.errorParkingType.showLanguage)
            return false
        }
        
        if self.vParkingCapacity.getText() == "" {
            hideError(isHidden: false, message: LocalizableKey.errorParkingCapacity.showLanguage)
            return false
        }
        
        if self.vParkingAddress.tvInput.text == "" {
            hideError(isHidden: false, message: LocalizableKey.errorParkingAddress.showLanguage)
            return false
        }
        
        if self.vOpen.tfInput.text == "" {
            hideError(isHidden: false, message: LocalizableKey.errorOpenTime.showLanguage)
            return false
        }
        
        if self.vClose.tfInput.text == "" {
            hideError(isHidden: false, message: LocalizableKey.errorCloseTime.showLanguage)
            return false
        }
        
        if self.vPriceAHours.tfInput.text == "" {
            hideError(isHidden: false, message: LocalizableKey.errorPriceAhours.showLanguage)
            return false
        }
        
        if self.vPriceCombo.tfInput.text == "" {
            hideError(isHidden: false, message: LocalizableKey.errorPriceCombo.showLanguage)
            return false
        }
        
        hideError()
        return true
    }
        func hideError(isHidden: Bool = true, message: String? = nil){
            lbError.isHidden = isHidden
            lbError.text = message ?? ""
        }
}

extension SignUpPartnerStep2ViewController {
    
    private func setTime() {
        //--Time
         datePickerTimeOpen.datePickerMode = .time
         datePickerTimeClose.datePickerMode = .time
         let toolbarTimeOpen = UIToolbar()
         toolbarTimeOpen.sizeToFit()
        let doneButton = UIBarButtonItem(title: "Done", style: UIBarButtonItem.Style.plain, target: self, action: #selector(doneDatePicker))
         let spaceButton = UIBarButtonItem(barButtonSystemItem: UIBarButtonItem.SystemItem.flexibleSpace, target: nil, action: nil)
         let cancelButton = UIBarButtonItem(title: "Cancel", style: UIBarButtonItem.Style.plain, target: self, action: #selector(cancelDatePicker))
        let cancelButtonClose = UIBarButtonItem(title: "Cancel", style: UIBarButtonItem.Style.plain, target: self, action: #selector(cancelDatePicker))
         toolbarTimeOpen.setItems([doneButton,spaceButton,cancelButton], animated: false)
         vOpen.tfInput.inputAccessoryView = toolbarTimeOpen
         vOpen.tfInput.inputView = datePickerTimeOpen
        
         //close time
         let toolbarTimeClose = UIToolbar()
          toolbarTimeClose.sizeToFit()
         
         let doneButtonClose = UIBarButtonItem(title: "Done", style: UIBarButtonItem.Style.plain, target: self, action: #selector(doneDatePickerClose))
          toolbarTimeClose.setItems([doneButtonClose,spaceButton,cancelButtonClose], animated: false)
         
         vClose.tfInput.inputAccessoryView = toolbarTimeClose
         vClose.tfInput.inputView = datePickerTimeClose
    }
    
    @objc func doneDatePicker(){
           //For time formate
           formatterTimeOpen.dateFormat = AppDateFormat.HHmm.formatString
        vOpen.tfInput.text = formatterTimeOpen.string(from: datePickerTimeOpen.date)
    
           //dismiss date picker dialog
           self.view.endEditing(true)
       }
    
    @objc func doneDatePickerClose(){
               //For time formate
               formatterTimeClose.dateFormat = AppDateFormat.HHmm.formatString
            vClose.tfInput.text = formatterTimeClose.string(from: datePickerTimeClose.date)
        
               //dismiss date picker dialog
               self.view.endEditing(true)
           }
       
       @objc func cancelDatePicker(){
           //cancel button dismiss datepicker dialog
           self.view.endEditing(true)
       }
}

extension SignUpPartnerStep2ViewController: SignUpPartnerStep2ViewProtocol {
    func didGetListParkingType(listParkingType: [ParkingTypeEntity]) {
        vParkingType.listItem = listParkingType.map({$0.name&})
        
    }
}

extension SignUpPartnerStep2ViewController: AppTextFieldDropDownDelegate {
    func didChangedValue(sender: AppDropDown, item: Any) {
        switch item as? String {
        case "Bãi xe có mái che":
            self.parkingTypeID = "1"
            case "Bãi xe không có mái che":
            self.parkingTypeID = "2"
            case "Bãi xe tính tiền tự động":
            self.parkingTypeID = "3"
            case "Bãi xe đặc biệt":
            self.parkingTypeID = "4"
        default:
            self.parkingTypeID = nil
        }
    }
    
    
}
