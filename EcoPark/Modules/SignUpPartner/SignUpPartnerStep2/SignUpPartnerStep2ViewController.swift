//
//  SignUpPartnerStep2ViewController.swift
//  EnglishApp
//
//  Created Tu DV on 10/30/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import GooglePlaces

class SignUpPartnerStep2ViewController: BaseViewController {
    
    @IBOutlet weak var vStep: PartnerStepView!
    @IBOutlet weak var lbParking: UILabel!
    @IBOutlet weak var vParkingName: AppTextField!
    @IBOutlet weak var vParkingType: AppDropDown!
    @IBOutlet weak var vParkingCapacity: AppTextField!
    @IBOutlet weak var vParkingAddress: AppTextView!
    @IBOutlet weak var vOpen: AppTextField!
    @IBOutlet weak var vClose: AppTextField!
    @IBOutlet weak var lbPrice: UILabel!
    @IBOutlet weak var vPriceAHours: AppTextField!
    @IBOutlet weak var vPriceCombo: AppTextField!
    @IBOutlet weak var lbLicense: UILabel!
    @IBOutlet weak var vTaxCode: AppTextField!
    @IBOutlet weak var lbFrontPhoto: UILabel!
    @IBOutlet weak var lbBacksidePhoto: UILabel!
    @IBOutlet weak var imgFrontPhoto: UIImageView!
    @IBOutlet weak var imgBacksidePhoto: UIImageView!
    @IBOutlet weak var btnDeletePhotoFront: UIButton!
    @IBOutlet weak var btnDeletePhotoBacksite: UIButton!
    @IBOutlet weak var btnNext: UIButton!
    @IBOutlet weak var lbError: UILabel!
    @IBOutlet weak var lbVndTime: UILabel!
    @IBOutlet weak var lbVndPacKet: UILabel!
    
    var presenter: SignUpPartnerStep2PresenterProtocol?
    
    var param: BossRegisterParam?
    var parkingTypeID: String?
    var urlPhoto_gpkd_front: String = ""
    var urlPhoto_gpkd_backside: String = ""
    
    let datePickerTimeOpen = UIDatePicker()
    let formatterTimeOpen = DateFormatter()
    let datePickerTimeClose = UIDatePicker()
    let formatterTimeClose = DateFormatter()
    
    var lat: Double = 0
    var long: Double = 0
    var listParkingType: [ParkingTypeEntity] = []
    var numberHours: String = ""
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        presenter?.getListParkingType()
        presenter?.getNumberHours()
    }
    
    private func setupUI() {
        setTitleNavigation(title: LocalizableKey.MenuSignUpPartner.showLanguage)
        addBackToNavigation()
        vStep.setStep2()
        lbParking.text = LocalizableKey.parkingInfo.showLanguage.uppercased()
        lbPrice.text = LocalizableKey.parkingPrice.showLanguage.uppercased()
        lbLicense.text = LocalizableKey.parkingLicense.showLanguage.uppercased()
        
        lbVndTime.text = "VND" + LocalizableKey.eachHours.showLanguage
        lbVndPacKet.text = "VND" + LocalizableKey.eachPackage.showLanguage
        
        vParkingName.setTitleAndPlaceHolder(title: LocalizableKey.parkingName.showLanguage, placeHolder: LocalizableKey.enter.showLanguage)
        vParkingType.setTitleAndPlaceHolder(title: LocalizableKey.parkingType.showLanguage, placeHolder: LocalizableKey.select.showLanguage)
        vParkingCapacity.setTitleAndPlaceHolder(title: LocalizableKey.parkingCapacity.showLanguage, placeHolder: LocalizableKey.enter.showLanguage)
        vParkingAddress.setTitleAndPlaceHolder(title: LocalizableKey.parkingAddress.showLanguage, placeHolder: LocalizableKey.select.showLanguage)
        vParkingAddress.setPlaceHolder(placeHolder: LocalizableKey.enter.showLanguage)
        vOpen.setTitleAndPlaceHolder(title: LocalizableKey.parkingOpen.showLanguage, placeHolder: LocalizableKey.enter.showLanguage)
        vClose.setTitleAndPlaceHolder(title: LocalizableKey.parkingClose.showLanguage, placeHolder: LocalizableKey.enter.showLanguage)
        vPriceAHours.setTitleAndPlaceHolder(title: LocalizableKey.priceAHours.showLanguage + " *", placeHolder: LocalizableKey.enter.showLanguage)
        vPriceCombo.setTitleAndPlaceHolder(title: LocalizableKey.priceCombo.showLanguage + " (\(numberHours + " " + LocalizableKey.hour.showLanguage) *)", placeHolder: LocalizableKey.enter.showLanguage)
        vTaxCode.setTitleAndPlaceHolder(title: LocalizableKey.parkingTaxCode.showLanguage, placeHolder: LocalizableKey.enter.showLanguage)
        vParkingCapacity.tfInput.keyboardType = .numberPad
        vPriceAHours.tfInput.keyboardType = .numberPad
        vPriceCombo.tfInput.keyboardType = .numberPad
        vTaxCode.tfInput.keyboardType = .numberPad
        
        lbFrontPhoto.text = LocalizableKey.photoFront.showLanguage
        lbBacksidePhoto.text = LocalizableKey.photoBackside.showLanguage
        btnNext.setTitle(LocalizableKey.next.showLanguage, for: .normal)
        btnDeletePhotoFront.isHidden = true
        btnDeletePhotoBacksite.isHidden = true
        vParkingType.delegateDropDown = self
        setTime()
        vStep.btnStep1.addTarget(self, action: #selector(btnStep1Tapped), for: .touchUpInside)
        vStep.btnStep3.addTarget(self, action: #selector(btnStep3Tapped), for: .touchUpInside)
        vPriceAHours.tfInput.delegate = self
        vPriceCombo.tfInput.delegate = self
    }
    
    @objc func btnStep1Tapped() {
        self.pop()
    }
    
    @objc func btnStep3Tapped() {
        if validateInputData() {
            let price = vPriceAHours.tfInput.text?.replacingOccurrences(of: ",", with: "")
            let packetPrice = vPriceCombo.tfInput.text?.replacingOccurrences(of: ",", with: "")
            let param2 = BossRegisterParam(email: self.param?.email,
                                           fullname: self.param?.fullname,
                                           gender: self.param?.gender,
                                           birthday: self.param?.birthday,
                                           identity_number: self.param?.identity_number,
                                           issued_by: self.param?.issued_by,
                                           issued_date: self.param?.issued_date,
                                           cmnd_img_before_src: self.param?.cmnd_img_before_src,
                                           cmnd_img_after_src: self.param?.cmnd_img_after_src,
                                           gpkd_img_before_src: urlPhoto_gpkd_front,
                                           gpkd_img_after_src: urlPhoto_gpkd_backside,
                                           parking_name: vParkingName.getText(),
                                           parking_type_id: parkingTypeID,
                                           number_place: vParkingCapacity.getText(),
                                           parking_address: vParkingAddress.tvInput.text,
                                           time_start: vOpen.getText(),
                                           time_end: vClose.getText(),
                                           code_tax: vTaxCode.getText(),
                                           price: price,
                                           package_price: packetPrice,
                                           material: [],
                                           parking_img_src: [],
                                           latAddress: lat,
                                           longAddress: long)
            
            self.push(controller: SignUpPartnerStep3Router.createModule(param: param2))
        }
    }
    
    @IBAction func btnPhotoFrontTapped() {
        SelectPhotoCanCropPopUp.shared.showCropPicker(controller: self) { image in
            guard let _image = image else { return }
            self.imgFrontPhoto.image = _image
            self.btnDeletePhotoFront.isHidden = false
            self.presenter?.uploadImageFront(image: _image)
            self.btnNext.isEnabled = false
            self.btnNext.backgroundColor = AppColor.color_136_136_136
        }
    }
    
    @IBAction func btnPhotoBacksideTapped() {
        SelectPhotoCanCropPopUp.shared.showCropPicker(controller: self) { image in
            guard let _image = image else { return }
            self.imgBacksidePhoto.image = _image
            self.btnDeletePhotoBacksite.isHidden = false
            self.presenter?.uploadImageBackside(image: _image)
            self.btnNext.isEnabled = false
            self.btnNext.backgroundColor = AppColor.color_136_136_136
        }
    }
    
    @IBAction func btnDeleteFrontTapped() {
        imgFrontPhoto.image = AppImage.imgAddImage
        self.btnDeletePhotoFront.isHidden = true
        self.urlPhoto_gpkd_front = ""
    }
    
    @IBAction func btnDeleteBacksideTapped() {
        imgBacksidePhoto.image = AppImage.imgAddImage
        self.btnDeletePhotoBacksite.isHidden = true
        self.urlPhoto_gpkd_backside = ""
    }
    
    @IBAction func btnNextTapped() {
        if validateInputData() {
            let price = vPriceAHours.tfInput.text?.replacingOccurrences(of: ",", with: "")
            let packetPrice = vPriceCombo.tfInput.text?.replacingOccurrences(of: ",", with: "")
            
            let param2 = BossRegisterParam(email: self.param?.email,
                                           fullname: self.param?.fullname,
                                           gender: self.param?.gender,
                                           birthday: self.param?.birthday,
                                           identity_number: self.param?.identity_number,
                                           issued_by: self.param?.issued_by,
                                           issued_date: self.param?.issued_date,
                                           cmnd_img_before_src: self.param?.cmnd_img_before_src,
                                           cmnd_img_after_src: self.param?.cmnd_img_after_src,
                                           gpkd_img_before_src: urlPhoto_gpkd_front,
                                           gpkd_img_after_src: urlPhoto_gpkd_backside,
                                           parking_name: vParkingName.getText(),
                                           parking_type_id: parkingTypeID,
                                           number_place: vParkingCapacity.getText(),
                                           parking_address: vParkingAddress.tvInput.text,
                                           time_start: vOpen.getText(),
                                           time_end: vClose.getText(),
                                           code_tax: vTaxCode.getText(),
                                           price: price,
                                           package_price: packetPrice,
                                           material: [],
                                           parking_img_src: [],
                                           latAddress: lat,
                                           longAddress: long)
            
            self.push(controller: SignUpPartnerStep3Router.createModule(param: param2))
        }
    }
    
    @IBAction func btnSelectAddressTapped() {
        let vcHomeFind = HomeFindRouter.createModule(address: "")
        vcHomeFind.delegate = self
        vcHomeFind.isSelectAddressSignUp = true
        self.push(controller: vcHomeFind)
    }
}


extension SignUpPartnerStep2ViewController {
    func validateInputData() -> Bool {
        if self.vParkingName.getText() == "" && self.vParkingType.tfInput.text == "" && self.vParkingCapacity.getText() == "" && self.vParkingAddress.tvInput.text == "" && vOpen.tfInput.text == "" && vClose.tfInput.text == "" && vPriceAHours.tfInput.text == "" && vPriceCombo.tfInput.text == "" {
            hideError(isHidden: false, message: LocalizableKey.emptyLoginEmailPassword.showLanguage)
            return false
        }
        
        if self.vParkingName.getText() == "" {
            hideError(isHidden: false, message: LocalizableKey.errorParkingName.showLanguage)
            return false
        }
        
        if self.vParkingType.tfInput.text == "" {
            hideError(isHidden: false, message: LocalizableKey.errorParkingType.showLanguage)
            return false
        }
        
        if self.vParkingCapacity.getText() == "" {
            hideError(isHidden: false, message: LocalizableKey.errorParkingCapacity.showLanguage)
            return false
        }
        
        if self.vParkingAddress.tvInput.text == "" {
            hideError(isHidden: false, message: LocalizableKey.errorParkingAddress.showLanguage)
            return false
        }
        
        if self.vOpen.tfInput.text == "" {
            hideError(isHidden: false, message: LocalizableKey.errorOpenTime.showLanguage)
            return false
        }
        
        if self.vClose.tfInput.text == "" {
            hideError(isHidden: false, message: LocalizableKey.errorCloseTime.showLanguage)
            return false
        }
        
        if self.vPriceAHours.tfInput.text == "" {
            hideError(isHidden: false, message: LocalizableKey.errorPriceAhours.showLanguage)
            return false
        }
        
        if self.vPriceCombo.tfInput.text == "" {
            hideError(isHidden: false, message: LocalizableKey.errorPriceCombo.showLanguage)
            return false
        }
        
        hideError()
        return true
    }
    func hideError(isHidden: Bool = true, message: String? = nil){
        lbError.isHidden = isHidden
        lbError.text = message ?? ""
    }
}

extension SignUpPartnerStep2ViewController {
    
    private func setTime() {
        //--Time
        datePickerTimeOpen.datePickerMode = .time
        datePickerTimeClose.datePickerMode = .time
        let toolbarTimeOpen = UIToolbar()
        toolbarTimeOpen.sizeToFit()
        let doneButton = UIBarButtonItem(title: "Done", style: UIBarButtonItem.Style.plain, target: self, action: #selector(doneDatePicker))
        let spaceButton = UIBarButtonItem(barButtonSystemItem: UIBarButtonItem.SystemItem.flexibleSpace, target: nil, action: nil)
        let cancelButton = UIBarButtonItem(title: "Cancel", style: UIBarButtonItem.Style.plain, target: self, action: #selector(cancelDatePicker))
        let cancelButtonClose = UIBarButtonItem(title: "Cancel", style: UIBarButtonItem.Style.plain, target: self, action: #selector(cancelDatePicker))
        toolbarTimeOpen.setItems([cancelButton,spaceButton,doneButton], animated: false)
        vOpen.tfInput.inputAccessoryView = toolbarTimeOpen
        vOpen.tfInput.inputView = datePickerTimeOpen
        
        //close time
        let toolbarTimeClose = UIToolbar()
        toolbarTimeClose.sizeToFit()
        
        let doneButtonClose = UIBarButtonItem(title: "Done", style: UIBarButtonItem.Style.plain, target: self, action: #selector(doneDatePickerClose))
        toolbarTimeClose.setItems([cancelButtonClose, spaceButton, doneButtonClose], animated: false)
        
        vClose.tfInput.inputAccessoryView = toolbarTimeClose
        vClose.tfInput.inputView = datePickerTimeClose
    }
    
    @objc func doneDatePicker(){
        //For time formate
        formatterTimeOpen.dateFormat = AppDateFormat.HHmm.formatString
        vOpen.tfInput.text = formatterTimeOpen.string(from: datePickerTimeOpen.date)
        
        //dismiss date picker dialog
        self.view.endEditing(true)
    }
    
    @objc func doneDatePickerClose(){
        //For time formate
        formatterTimeClose.dateFormat = AppDateFormat.HHmm.formatString
        vClose.tfInput.text = formatterTimeClose.string(from: datePickerTimeClose.date)
        
        //dismiss date picker dialog
        self.view.endEditing(true)
    }
    
    @objc func cancelDatePicker(){
        //cancel button dismiss datepicker dialog
        self.view.endEditing(true)
    }
}

extension SignUpPartnerStep2ViewController: SignUpPartnerStep2ViewProtocol {
    func didUploadImageFront(photo: String?) {
        self.urlPhoto_gpkd_front = photo ?? ""
        btnNext.isEnabled = true
        self.btnNext.backgroundColor = AppColor.color_0_129_255
    }
    
    func didUploadImageBackside(photo: String?) {
        self.urlPhoto_gpkd_backside = photo ?? ""
        self.btnNext.isEnabled = true
        self.btnNext.backgroundColor = AppColor.color_0_129_255
    }
    
    func didGetListParkingType(listParkingType: [ParkingTypeEntity]) {
        self.listParkingType = listParkingType
        vParkingType.listItem = listParkingType.map({$0.name&})
        
    }
    
    func didGetNumberHours(numberHours: String?) {
        self.numberHours = numberHours ?? ""
        setupUI()
    }
}

extension SignUpPartnerStep2ViewController: AppTextFieldDropDownDelegate {
    func didChangedValue(sender: AppDropDown, item: Any, index: Int) {
        
        parkingTypeID = listParkingType[index]._id ?? ""
    }
}

extension SignUpPartnerStep2ViewController: HomeFindViewControllerDelegate {
    func didSelectMyLocation() {
        getAddressFromLocation(pdblLatitude: CGFloat(UserDefaultHelper.shared.myLocationCoordinate.latitude), withLongitude: CGFloat(UserDefaultHelper.shared.myLocationCoordinate.longitude))
    }
    
    func getAddressFromLocation(pdblLatitude: CGFloat, withLongitude pdblLongitude: CGFloat) {
        var center : CLLocationCoordinate2D = CLLocationCoordinate2D()
        let lat: Double = Double("\(pdblLatitude)")!
        //21.228124
        let lon: Double = Double("\(pdblLongitude)")!
        //72.833770
        let ceo: CLGeocoder = CLGeocoder()
        center.latitude = lat
        center.longitude = lon
        
        var resultAddress: String = ""
        
        let loc: CLLocation = CLLocation(latitude:center.latitude, longitude: center.longitude)
        
        var addressString : String = ""
        ceo.reverseGeocodeLocation(loc, completionHandler:
            {(placemarks, error) in
                if (error != nil)
                {
                    print("reverse geodcode fail: \(error!.localizedDescription)")
                }
                
                guard let pm = placemarks  else { return }
                
                if pm.count > 0 {
                    let pm = placemarks![0]
                    if pm.thoroughfare != nil {
                        addressString = addressString + pm.thoroughfare! + ", "
                    }
                    
                    if pm.subLocality != nil {
                        addressString = addressString + pm.subLocality! + ", "
                    }
                    
                    if pm.locality != nil {
                        addressString = addressString + pm.locality! + ", "
                    }
                    if pm.country != nil {
                        addressString = addressString + pm.country! + ", "
                    }
                    if pm.postalCode != nil {
                        addressString = addressString + pm.postalCode! + " "
                    }
                    print(addressString)
                    
                    resultAddress =  addressString
                }
                
                self.vParkingAddress.tvInput.text = resultAddress
                self.vParkingAddress.lbPlaceHolder.text = ""
                self.lat = Double(pdblLatitude)
                self.long = Double(pdblLongitude)
        })
       
    }
    
    func didSelectAddressSignUp(address: String, lat: CLLocationDegrees, long: CLLocationDegrees) {
        vParkingAddress.tvInput.text = address
        vParkingAddress.lbPlaceHolder.text = ""
        self.lat = lat
        self.long = long
    }
    
    func didSelectAddress(address: String, lat: CLLocationDegrees, long: CLLocationDegrees) {
        
    }
}
extension SignUpPartnerStep2ViewController: UITextFieldDelegate {
    
    
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        // Uses the number format corresponding to your Locale
        let formatter = NumberFormatter()
        formatter.numberStyle = .decimal
        formatter.locale = Locale.current
        formatter.maximumFractionDigits = 0
        
        
        // Uses the grouping separator corresponding to your Locale
        // e.g. "," in the US, a space in France, and so on
        if let groupingSeparator = formatter.groupingSeparator {
            
            if string == groupingSeparator {
                return true
            }
            
            
            if let textWithoutGroupingSeparator = textField.text?.replacingOccurrences(of: groupingSeparator, with: "") {
                var totalTextWithoutGroupingSeparators = textWithoutGroupingSeparator + string
                if string.isEmpty { // pressed Backspace key
                    totalTextWithoutGroupingSeparators.removeLast()
                }
                if let numberWithoutGroupingSeparator = formatter.number(from: totalTextWithoutGroupingSeparators),
                    let formattedText = formatter.string(from: numberWithoutGroupingSeparator) {
                    
                    textField.text = formattedText
                    return false
                }
            }
        }
        return true
    }
}
